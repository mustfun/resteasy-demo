/*
 * Copyright (c) 2018.  wuhandzy@gmail.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package com.dzy.resteasy.plugins;

import org.mybatis.generator.api.GeneratedXmlFile;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.codegen.XmlConstants;
import org.mybatis.generator.config.Context;
import org.mybatis.generator.logging.Log;
import org.mybatis.generator.logging.LogFactory;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @author dengzhiyuan
 * @version 1.0
 * @date 2018/1/9
 * @since 1.0
 */
public class ExtMapperPlugin extends PluginAdapter {

    private static final Log logger = LogFactory.getLog(ExtDomainPlugin.class);

    private Context context;


    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

    @Override
    public void setContext(Context context) {
        this.context = context;
    }

    /**
     * 生成一个扩展的mapper
     * @param sqlMap
     * @param introspectedTable
     * @return
     */
    @Override
    public boolean sqlMapGenerated(GeneratedXmlFile sqlMap, IntrospectedTable introspectedTable) {
        return true;
    }

    /**
     * 当某一个table生成mapper之后就会调用
     * @param introspectedTable
     * @return
     */
    @Override
    public List<GeneratedXmlFile> contextGenerateAdditionalXmlFiles(IntrospectedTable introspectedTable) {
        Document document = new Document(
                XmlConstants.MYBATIS3_MAPPER_PUBLIC_ID,
                XmlConstants.MYBATIS3_MAPPER_SYSTEM_ID);

        //获取实体类的全类名
        String packageName = introspectedTable.getBaseRecordType();
        //获取实体类的类名
        String domainName = introspectedTable.getFullyQualifiedTable().getDomainObjectName();
        //当前Mapper名称
        String mapperName = introspectedTable.getMyBatis3JavaMapperType();
        //alis
        String mapperSimpleName = introspectedTable.getTableConfiguration().getMapperName();
        if (mapperSimpleName==null){
            //如果没有写mapperName就是空的,而且mapperSimpleName就是Mapper结尾
            mapperSimpleName = domainName+"Mapper";
        }

        XmlElement root = new XmlElement("mapper");
        root.addAttribute(new Attribute("namespace",mapperName));
        document.setRootElement(root);

        root.addElement(new TextElement("<!--"));
        root.addElement(new TextElement(
                "  This file is generated by MyBatis Generator Plus."));
        root.addElement(new TextElement(
                "  please write sql here"));

        StringBuilder sb = new StringBuilder();
        sb.append("  This file was generated on ");
        sb.append(new Date());
        sb.append('.');
        root.addElement(new TextElement(sb.toString()));

        root.addElement(new TextElement("-->"));

        String fileName =mapperSimpleName+"Ext.xml";

        GeneratedXmlFile gxf = new GeneratedXmlFile(document, fileName,introspectedTable.getContext().getSqlMapGeneratorConfiguration().getTargetPackage()+"/ext"
                ,introspectedTable.getContext().getSqlMapGeneratorConfiguration().getTargetProject(),
                false, context.getXmlFormatter());

        List<GeneratedXmlFile> answer = new ArrayList<>(1);
        answer.add(gxf);
        return answer;
    }
}
